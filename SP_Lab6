#include <stdio.h>
#include <stdlib.h>
#define MAX 5


struct Element;
typedef struct Element* element;

typedef struct Element
{
	int value;

	element next;

};



typedef struct Stack
{
	int capacity;
	int top;

	element next;



};

typedef struct Stack* stack;

stack CreateStack();				//
element CreateElement(int);			//
element FindLast(stack);			//

int AddToStack(element, stack);		//
element Push(int, stack);			//

int DeleteLastElement(stack);		
element Pop(stack);

void PrintStack(stack);				//

int main()
{


}



stack CreateStack()
{
	stack s = (stack)malloc(sizeof(Stack));
	if (s != NULL)
	{
		s->capacity = MAX;
		s->top = 0;

		s->next = NULL;
		return s;
	}
	else
	{
		printf("Stack allocation failed \n");
		return NULL;
	}
}

element CreateElement(int val)
{
	element e = (element)malloc(sizeof(Element));
	if (e != NULL) 
	{
		e->value = val;
		e->next = NULL;

		return e;
	}
	else
	{
		printf("Element allocation failed--->return NULL \n");
		return NULL;
	}
}

element FindLast(stack s)
{
	element e;

	if (s != NULL)
	{
		e = s->next;

		if (e != NULL)
		{
			while (e->next != NULL)
				e = e->next;
			return e;
		}
		else
		{
			printf("Empty stack in function FindLast--->return NULL \n");
			return NULL;
		}
	}
	else
	{
		printf("No stack found in function FindLast--->return NULL \n");
		return NULL;
	}
}

int AddToStack(element e, stack s)
{
	element temp;

	if (e!=NULL)
	{
		if (s != NULL)
		{
			temp = s->next;
			if (temp != NULL)
			{
				while (temp->next != NULL) temp = temp->next;
				temp->next = e;
				s->top++;
				e->next = NULL;
				return 0;
			}
			else
			{
				s->next = e;
				s->top++;
				e->next = NULL;
				return 0;
			}
		}
		else
		{
			printf("Stack missing in function AddToStack \n");
			return -1;
		}

	}
	else
	{
		printf("Element missing in function AddToStack \n");
		return -2;
	}
}

element Push(int val, stack s)
{
	element e;
	if (s != NULL)
	{
		if (s->top < s->capacity)
		{
			e = CreateElement(val);
			AddToStack(e, s);
			return e;
		}
		else
		{
			printf("Stack is full, Push() failed--->return NULL \n");
			return NULL;
		}

	}
	else
	{
		printf("No stack found---> return NULL \n");
		return NULL;
	}



}

int DeleteLastElement(stack s)
{
	element last;
	element temp;

	if (s != NULL)
	{
		if (s->top != 0)
		{
			last = FindLast(s);
			temp = s->next;

			

			if (last == temp)
			{
				s->next = NULL;
				s->top--;
				free(last);
				return 0;
			}
			else
			{
				while (temp->next != last)
					temp = temp->next;

				temp->next = NULL;
				s->top--;
				free(last);
				return 0;
			}
		}
		else
		{
			printf("Stack is empty in function DeleteLastElement \n");
			return 1;
		}

	}
	else
	{
		printf("No stack found for function DeleteLastElement \n");
		return -1;
	}



}

element Pop(stack s)
{
	if (s != NULL)
	{

		if (s->top != 0)
		{
			DeleteLastElement(s);
			return FindLast(s);
		}
		else
		{
			printf("Stack is empty, Pop is not allowed--->return NULL");
			return NULL;
		}
		
	}
	else
	{
		printf("No stack found in function Pop ---> return NULL \n");
		return NULL;
	}
}


void PrintStack(stack s)
{
	element temp;

	if (s != NULL)
	{
		temp = s->next;

		if (temp != NULL)
		{
			while (temp != NULL)
			{
				printf("%d \n", temp->value);
				temp = temp->next;
			}
		}
		else
			printf("Empty stack \n");
	}
	else
		printf("No stack found at function PrintStack \n");
}
